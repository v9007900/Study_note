#include <iostream>
#include <windows.h>
using namespace std;

void Add(int* a, int* b)
{
    (*a) += (*b); ////指针a的值+指针b的值
    cout << "void a----" << a << "*a--" << *a << "&a--" << &a << "void b----" << b << "*b--" << *b << "&b--" << &b
         << endl;
}

//??指针不带 * 表示 与 a{100}  类似，此时的指针的值 就是地址      带 * 就是 指向地址的值
////a----指针*a的值是（0x61fe1c）----main函数中a的地址
////*a----指针*a指向的是a的地址(0x61fdf0)对于的值是(30)
////&a----a本身的地址（0x61fdf0）????疑问，指针a本身也有地址，也相当于一个临时变量.
//// 如果，传递的是值，那么本身的值并未发生改变，那么需要，等待返回结果在更改
////如果，Add直接引用a，也是修改的a本身的值。

////& 取地址符 是取值 本身的地址
////* 指针是本身的值是一个地址(在用取地址符的话，取的是指针的地址，而不是指向目标的地址)
////*& a引用了指针b的地址，那么a的值就是b的地址，此时就有了二层调整，a引用了b,b又指向了c。

////b----指针*b的值是（0x61fe18）----main函数中b的地址
////*b-----b指向地址的值（20）
////&b-----b本身的地址（0x61fdf8）

int main()
{
    int a{10}, b{20};
    Add(&a, &b); // 取 A 和 B 的地址，传递给ADD
    cout << "main----" << &a << "----" << &b << endl << endl << endl;
    int* ptr{(int*)0x61fe18};
    *ptr = 4; ////括号++  先运算 *      表示指针
    cout << *ptr << "----" << ptr << endl;
}
////&a----0x61fe1c----10
////&b----0x61fe18----20
